/**
 * 解析指令简易版
 * @param el :目标元素
 * @param value : 数据
 */
function Compile (el, value) {
    //挂载数据
    this.$val = value;
    //判断是否为元素节点，是就返回，不是就获取
    this.$el = this.isElementNode(el) ? el : document.querySelector(el);
    //如果存在, 则解析此元素
    if (this.$el) {
        this.compileElement(this.$el);
    }
}

Compile.prototype = {
    constructor: Compile,
    //解析元素
    compileElement: function (el) {
        let self = this;
        //获取子元素 [] 或者 [...]
        let childNodes = el.childNodes;
        childNodes.forEach(function(node) {
            //此处会获取到node下所有的文本节点拼接成的字符串
            let text = node.textContent;  
            let reg = /\{\{(.+?)\}\}/;
            //如果是元素节点
            if (self.isElementNode(node)) {
                self.compile(node);
            }
            //如果是文本节点 (只取第一个)
            else if (self.isTextNode(node) && reg.test(text)) {
                self.compileText(node, RegExp.$1.trim())
            }
            //解析子节点包含的指令
            if (node.childNodes && node.childNodes.length) {
                self.compileElement(node);
            }
        });
    },

    //解析元素节点指令
    compile: function (node) {
        //获取节点的所有属性
        let nodeAttr = node.attributes;
        let self = this;
        [].slice.call(nodeAttr).forEach(function(attr) {
            let attrName = attr.name;
            if (self.isDirective(attrName)) {
                let exp = attr.value;
                node.innerHTML = typeof self.$val[exp] === "undefined" ? "" : self.$val[exp];
                node.removeAttribute(attrName);
            }
        })
    },
    // {{ text }} 匹配变量 text
    compileText: function (node, exp) {
        node.textContent = typeof this.$val[exp] === "undefined" ? "" : this.$val[exp];
    },
    //判断是否为元素节点
    isElementNode: function (node) {
        return node.nodeType === 1;
    },
    //判断是否为文本节点
    isTextNode: function (node) {
        return node.nodeType === 3;
    },
    //是否为指令属性 x-abc
    isDirective: function (attr) {
        return attr.indexOf("x-") === 0;
    }
}